name: .NET Core Delivery Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: jwilliams-demo-cluster    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-dotnet-core # TODO: update to deployment name
  REPOSITORY: dotnet-core # TODO: update to Artifact Registry docker repository
  IMAGE: dotnet-core

jobs:
  build:
    name: Build, Docker Publish, Kubernetes Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set Environment Variables
      uses: ./.github/actions/setvars
      with:
        varFilePath: ./.github/variables/myvars.env
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore .NET Dependencies
      run: dotnet restore
    - name: Build API
      run: dotnet build --no-restore
    - name: Test API
      run: dotnet test --no-build --verbosity normal
      # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e'
      with:
        credentials: '${{ secrets.GCP_CREDENTIALS }}' 
        location: '${{ env.GKE_ZONE }}'
        cluster_name: '${{ env.GKE_CLUSTER}}'
    - name: Build/Upload Image to Artifact Registry
      run: |-
        echo $GCP_CREDENTIALS | docker login -u _json_key --password-stdin https://$GAR_LOCATION-docker.pkg.dev
        docker build -t dotnet-core:$RELEASE_VERSION -f ./dotnet-core/Dockerfile . --platform linux/amd64
        docker tag dotnet-core:$RELEASE_VERSION us-central1-docker.pkg.dev/solutions-engineering-248511/se-jwilliams-sandbox/dotnet-core:$RELEASE_VERSION
        docker push us-central1-docker.pkg.dev/solutions-engineering-248511/se-jwilliams-sandbox/dotnet-core:$RELEASE_VERSION
    - name: Deploy to GKE
      run: |-
        gcloud components list
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt update
        sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
        gcloud --quiet auth configure-docker
        gcloud container clusters get-credentials jwilliams-demo-cluster --zone $GKE_ZONE --project $PROJECT_ID
        cat <<EOF >release-deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            app: dotnet-core-api
          name: dotnet-core-api
          namespace: dotnet-core
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: dotnet-core-api
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: dotnet-core-api
            spec:
              containers:
                - image: us-central1-docker.pkg.dev/solutions-engineering-248511/se-jwilliams-sandbox/dotnet-core:$RELEASE_VERSION
                  imagePullPolicy: Always
                  name: dotnet-core-api
                  ports:
                    - containerPort: 80
                  resources: {}
        status: {}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            cloud.google.com/neg: '{"ingress":true}'
          finalizers:
            - service.kubernetes.io/load-balancer-cleanup
          labels:
            app: dotnet-core-api
          name: dotnet-core-api
          namespace: dotnet-core
        spec:
          externalTrafficPolicy: Cluster
          ports:
            - port: 80
              protocol: TCP
              targetPort: 80
          selector:
            app: dotnet-core-api
          sessionAffinity: None
          type: LoadBalancer
        EOF
        kubectl apply -f ./release-deployment.yaml; kubectl rollout restart deployment dotnet-core-api;